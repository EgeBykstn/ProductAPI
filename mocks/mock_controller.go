// Code generated by MockGen. DO NOT EDIT.
// Source: product-api/controller (interfaces: ProductRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "product-api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// AddNewRepoProduct mocks base method.
func (m *MockProductRepo) AddNewRepoProduct(arg0 *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRepoProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewRepoProduct indicates an expected call of AddNewRepoProduct.
func (mr *MockProductRepoMockRecorder) AddNewRepoProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRepoProduct", reflect.TypeOf((*MockProductRepo)(nil).AddNewRepoProduct), arg0)
}

// DeleteRepoProductByID mocks base method.
func (m *MockProductRepo) DeleteRepoProductByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoProductByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoProductByID indicates an expected call of DeleteRepoProductByID.
func (mr *MockProductRepoMockRecorder) DeleteRepoProductByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoProductByID", reflect.TypeOf((*MockProductRepo)(nil).DeleteRepoProductByID), arg0)
}

// FindRepoProductQueryParams mocks base method.
func (m *MockProductRepo) FindRepoProductQueryParams(arg0, arg1, arg2 string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRepoProductQueryParams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRepoProductQueryParams indicates an expected call of FindRepoProductQueryParams.
func (mr *MockProductRepoMockRecorder) FindRepoProductQueryParams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRepoProductQueryParams", reflect.TypeOf((*MockProductRepo)(nil).FindRepoProductQueryParams), arg0, arg1, arg2)
}

// GetRepoProductByID mocks base method.
func (m *MockProductRepo) GetRepoProductByID(arg0 string) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProductByID", arg0)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProductByID indicates an expected call of GetRepoProductByID.
func (mr *MockProductRepoMockRecorder) GetRepoProductByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProductByID", reflect.TypeOf((*MockProductRepo)(nil).GetRepoProductByID), arg0)
}

// GetRepoProducts mocks base method.
func (m *MockProductRepo) GetRepoProducts() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProducts")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProducts indicates an expected call of GetRepoProducts.
func (mr *MockProductRepoMockRecorder) GetRepoProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProducts", reflect.TypeOf((*MockProductRepo)(nil).GetRepoProducts))
}

// UpdateRepoProductByID mocks base method.
func (m *MockProductRepo) UpdateRepoProductByID(arg0 *model.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoProductByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepoProductByID indicates an expected call of UpdateRepoProductByID.
func (mr *MockProductRepoMockRecorder) UpdateRepoProductByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoProductByID", reflect.TypeOf((*MockProductRepo)(nil).UpdateRepoProductByID), arg0)
}
